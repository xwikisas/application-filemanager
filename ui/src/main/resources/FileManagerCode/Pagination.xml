<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="FileManagerCode.Pagination" locale="">
  <web>FileManagerCode</web>
  <name>Pagination</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>FileManagerCode.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro (paginationTemplate)
  &lt;div ng-class="{paginationFilter: isSeparate}"&gt;
    &lt;span ng-if="showResultsRange" class="resultsNo xwiki-livetable-limits"&gt;
      &lt;span ng-if="totalCount == 0" class="currentResultsNo"&gt;
        $services.localization.render('platform.livetable.paginationResultsNone')
      &lt;/span&gt;
      &lt;span ng-if="totalCount == 1" class="currentResultsNo"&gt;
        $services.localization.render('platform.livetable.paginationResultsOne')
      &lt;/span&gt;
      &lt;span ng-if="totalCount &gt; 1 &amp;&amp; from == totalCount"&gt;
        $services.localization.render('platform.livetable.paginationResultsSingle',
          ['{{from}}', '{{totalCount}}'])
      &lt;/span&gt;
      &lt;span ng-if="totalCount &gt; 1 &amp;&amp; from != totalCount"&gt;
        $services.localization.render('platform.livetable.paginationResultsMany',
          ['{{from}}', '{{to}}', '{{totalCount}}'])
      &lt;/span&gt;
    &lt;/span&gt;

    &lt;span ng-if="showResultsRange &amp;&amp; actualTotalCount === undefined" class="xwiki-livetable-loader"&gt;
      &lt;img src="$xwiki.getSkinFile('icons/xwiki/ajax-loader-large.gif')" alt="$services.localization.render('platform.livetable.loading')"
        title="$services.localization.render('platform.livetable.loading')" /&gt;
    &lt;/span&gt;

    &lt;span ng-if="totalCount &gt; 0" class="controlPagination"&gt;
      &lt;span ng-if="pageNumber == 0" class="noPrevPagination"&gt; &lt;/span&gt;
      &lt;a ng-if="pageNumber &gt; 0" href="#previousPage" ng-click="loadPage(pageNumber - 1); $event.preventDefault()"
          title="$services.localization.render('platform.livetable.paginationPagePrevTitle')" class="prevPagination"&gt;
        $services.localization.render('platform.livetable.paginationPagePrevious')
      &lt;/a&gt;

      &lt;span ng-if="pageNumber &gt;= pageCount - 1" class="noNextPagination"&gt; &lt;/span&gt;
      &lt;a ng-if="pageNumber &lt; pageCount - 1" href="#nextPage" ng-click="loadPage(pageNumber + 1); $event.preventDefault()"
          title="$services.localization.render('platform.livetable.paginationPageNextTitle')" class="nextPagination"&gt;
        $services.localization.render('platform.livetable.paginationPageNext')
      &lt;/a&gt;
    &lt;/span&gt;

    &lt;span ng-if="totalCount &gt; 0" class="pagination"&gt;
      $services.localization.render('platform.livetable.paginationPage')
      ## Always show first page number.
      &lt;page-link number="0" ng-if="contextFirstPage != 0"&gt;&lt;/page-link&gt;
      &lt;span ng-if="contextFirstPage &gt; 1"&gt; ... &lt;/span&gt;
      &lt;page-link number="{{i}}" ng-repeat="i in pageNumbers"&gt;&lt;/page-link&gt;
      &lt;span ng-if="contextLastPage &lt; pageCount - 2"&gt; ... &lt;/span&gt;
      ## Always show last page number.
      &lt;page-link number="{{pageCount - 1}}" ng-if="contextLastPage != pageCount - 1"&gt;&lt;/page-link&gt;
    &lt;/span&gt;
  &lt;/div&gt;
#end

#macro (pageLinkTemplate)
  &lt;a href="#page" ng-if="number != pageNumber" ng-click="loadPage(number); $event.preventDefault()"
    title="$services.localization.render('platform.livetable.paginationPageTitle',
    ['{{number + 1}}'])"&gt;{{number + 1}}&lt;/a&gt;
  &lt;span ng-if="number == pageNumber" class="currentPage"&gt;
    {{number + 1}}
  &lt;/span&gt;
#end
{{/velocity}}

{{velocity}}
{{html clean="false"}}
#if ($request.template == 'pageLink')
  #pageLinkTemplate
#else
  #paginationTemplate
#end
{{/html}}
{{/velocity}}</content>
  <object>
    <name>FileManagerCode.Pagination</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>8a9adccf-da0b-4cde-9830-96be55074a12</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <restricted>0</restricted>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>define(['angular'], function(angular) {
  var pagination = angular.module('pagination', []);

  pagination.directive('pagination', function() {
    return {
      restrict: 'E',
      scope: {
        actualTotalCount: '=totalCount',
        offset: '=',
        limit: '=',
        showResultsRange: '@'
      },
      templateUrl: new XWiki.Document('Pagination', 'FileManagerCode').getURL('get'),
      link: function(scope, element, attrs) {
        scope.loadPage = function(pageNumber) {
          scope.offset = pageNumber * scope.limit;
        };

        scope.$watch('[actualTotalCount, offset, limit]', function(newValues, oldValues) {
          // Initialize the scope once and then update the values only when the total count is defined.
          // The total count is usually undefined while a new page is loaded and so we use the old value until we
          // receive the new one. This way we reduce the UI flickering.
          if (scope.actualTotalCount === undefined &amp;&amp; scope.totalCount) return;

          var totalCount = newValues[0] || 0;
          var offset = newValues[1] || 0;
          var limit = newValues[2] || 15;

          scope.totalCount = totalCount;
          scope.from = offset + 1;
          scope.to = Math.min(offset + limit, totalCount);
          scope.pageNumber = Math.floor(offset / limit);
          scope.pageCount = Math.floor((totalCount + limit - 1) / limit);

          var contextRadius = 4;
          var contextSize = 2 * contextRadius + 1;
          if (scope.pageCount &lt;= contextSize) {
            scope.contextFirstPage = 0;
            scope.contextLastPage = scope.pageCount - 1;
          } else {
            scope.contextFirstPage = Math.min(Math.max(scope.pageNumber - contextRadius, 0), scope.pageCount - contextSize);
            scope.contextLastPage = Math.max(Math.min(scope.pageNumber + contextRadius, scope.pageCount - 1), contextSize - 1);
          }
          scope.pageNumbers = [];
          for (var i = scope.contextFirstPage; i &lt;= scope.contextLastPage; i++) {
            scope.pageNumbers.push(i);
          }
        }, true);
      }
    };
  });

  pagination.directive('pageLink', function() {
    return {
      restrict: 'E',
      scope: true,
      templateUrl: new XWiki.Document('Pagination', 'FileManagerCode').getURL('get', 'template=pageLink'),
      link: function(scope, element, attrs) {
        scope.number = parseInt(attrs.number);
      }
    };
  });
});</code>
    </property>
    <property>
      <name>Directives</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
