<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="FileManagerCode.Macros" locale="">
  <web>FileManagerCode</web>
  <name>Macros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>FileManagerCode.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output=false}}
#set ($isAjaxRequest = $request.getHeader('X-Requested-With') == 'XMLHttpRequest')
#set ($selectChildFolders = 'from doc.object(FileManagerCode.FolderClass) as folder where doc.space = :space and doc.parent = :parent')
## We need to use HQL because XWQL doesn't support nested queries.
#set ($selectAllFoldersFromDriveHQL = "select folderDoc.fullName from XWikiDocument folderDoc, BaseObject folderObj where folderDoc.space = :space and folderObj.name = folderDoc.fullName and folderObj.className = 'FileManagerCode.FolderClass'")
#set ($hasNoParent = "(doc.parent = '' or (doc.parent &lt;&gt; :parent and doc.parent not in ($selectAllFoldersFromDriveHQL)))")
#set ($selectOrphanFolders = "from doc.object(FileManagerCode.FolderClass) as folder where doc.space = :space and $hasNoParent")

#macro (getDrive $driveDoc $return)
  #set ($return = $NULL)
  #setVariable("$return", {
    'id': $doc.documentReference.name,
    'name': $doc.plainTitle,
    'canCreate': $hasCreatePage
  })
#end

#macro (getChildFolders $parentDoc $return)
  #getFolders($selectChildFolders {'space': $parentDoc.space, 'parent': $parentDoc.fullName} $_return)
  #set ($return = $NULL)
  #setVariable("$return" $_return)
#end

#macro (getOrphanFolders $return)
  #getFolders($selectOrphanFolders {'space': $doc.space, 'parent': $doc.fullName} $_return)
  #set ($return = $NULL)
  #setVariable("$return" $_return)
#end

#macro (checkIfHasOrphanFolders $return)
  #set ($query = $services.query.xwql($selectOrphanFolders))
  #set ($query = $query.bindValue('space', $doc.space).bindValue('parent', $doc.fullName))
  #set ($results = $query.setLimit(1).execute())
  #set ($return = $NULL)
  #setVariable("$return" $results.size().equals(1))
#end

#macro (getFolders $statement $parameters $return)
  #set ($query = $services.query.xwql("$statement order by doc.name"))
  #foreach ($entry in $parameters.entrySet())
    #set ($discard = $query.bindValue($entry.key, $entry.value))
  #end
  #set ($folderCount = $query.count())
  #set ($folders = [])
  #set ($offset = $mathtool.max($numbertool.toNumber($request.offset).intValue(), 0))
  #if (!$offset)
    #set ($offset = 0)
  #end
  #set ($discard = $query.setOffset($offset))
  #set ($limit = $numbertool.toNumber($request.limit).intValue())
  #if (!$limit)
    #set ($limit = 15)
  #end
  #set ($discard = $query.setLimit($limit))
  #foreach ($folderId in $query.execute())
    #set ($folderDoc = $xwiki.getDocument($folderId))
    #if ($folderDoc)
      #getFolder($folderDoc $folder)
      #set ($discard = $folders.add($folder))
    #end
  #end
  #set ($return = $NULL)
  #setVariable("$return" {
    'totalCount': $folderCount,
    'offset': $offset,
    'limit': $limit,
    'list': $folders
  })
#end

#macro (getFolder $folderDoc $return)
  #set ($path = [])
  #getPath($folderDoc $path)
  #if (!$path.isEmpty())
    #set ($path = $path.subList(1, $path.size()))
  #end
  #checkIfHasFolders($folderDoc $hasFolders)
  #set ($canDeleteFolderDoc = $folderDoc.hasAccessLevel('delete'))
  #set ($return = $NULL)
  #setVariable("$return" {
    'id': $folderDoc.documentReference.name,
    'name': $folderDoc.plainTitle,
    'path': $path,
    'hasFolders': $hasFolders,
    'canRename': $canDeleteFolderDoc,
    'canDelete': $canDeleteFolderDoc,
    'canMove': $canDeleteFolderDoc,
    'canCopy': $hasCreatePage,
    'canCreate': $hasCreatePage
  })
#end

#macro (checkIfHasFolders $folderDoc $return)
  #set ($query = $services.query.xwql($selectChildFolders))
  #set ($query = $query.bindValue('space', $folderDoc.space).bindValue('parent', $folderDoc.fullName))
  #set ($results = $query.setLimit(1).execute())
  #set ($return = $NULL)
  #setVariable("$return" $results.size().equals(1))
#end

#macro (createFolder $name $parent)
  ## Trimming whitespaces from the input name to address potential issues with the database collation which may lead to
  ## unexpected behavior when dealing with trailing whitespaces.
  #set ($name = $name.trim())
  #if ("$!name" == '')
    #set ($name = 'Untitled Folder')
  #end
  #set ($folderReference = $services.drive.getUniqueReference($name))
  #if ("$!parent" == '')
    #set ($parent = $doc.documentReference.name)
  #end
  #set ($parentReference = $services.model.createDocumentReference($parent, $doc.documentReference.lastSpaceReference))
  ## Note that XWiki supports Velocity code inside page titles (e.g. in order to use translation keys) but this can be
  ## very confusing for simple users that create folders with Velocity special characters in their names without being
  ## aware of it. For this reason we escape the Velocity special characters. Note that we need the title because we're
  ## not using nested pages to hold the folder hierarchy yet so folder name collision is quite common in which case the
  ## used page name is not exactly the folder name given by the user (e.g. when the user creates the folder "Test" we
  ## might have to create the page "Test13" with the title "Test").
  $response.sendRedirect($xwiki.getURL($folderReference, 'save', $escapetool.url({
    'title': $escapetool.velocity($name),
    'parent': $services.model.serialize($parentReference, 'compactwiki'),
    'template': 'FileManagerCode.FolderTemplate',
    'comment': 'Folder created',
    'form_token': $request.form_token,
    'xredirect': $xwiki.getURL($folderReference, 'get', 'outputSyntax=plain')
  })))
#end

#macro (filterByDate)
  #set ($results = $regextool.find($filterValue, '^(\*|\d+).(\*|\d+).(\*|\d+)$'))
  #if ($results.size() == 4)
    #foreach ($field in ['day', 'month', 'year'])
      #set ($value = $results.get($foreach.count).group)
      #if ($value != '*')
        #set ($paramName = "$entry.key$stringtool.capitalize($field)")
        #set ($where = "$where and :$paramName in (${field}($entry.value))")
        #set ($discard = $parameters.put($paramName, $value))
      #end
    #end
  #else
    #set ($results = $regextool.find($filterValue, '^-(\d+)([dwmy])$'))
    #if ($results.size() == 3)
      #set ($amount = $numbertool.toNumber($results.get(1).group).intValue())
      #set ($unit = $results.get(2).group)
      #set ($now = $xwiki.jodatime.dateTime)
      #if ($unit == 'd')
        ## If $amount &gt; 1 then the range starts at 12:00:00 AM $amount days before the current day and continues up to
        ## the current second. This means the range includes today! We handle $amount == 0 (Today) and $amount == 1
        ## (Yesterday) differently.Yesterday
        #set ($start = $now.minusDays($amount).withTimeAtStartOfDay())
        #if ($amount &gt; 1)
          #set ($end = $now)
        #else
          ## For Today and Yesterday the period is just one day.
          #set ($end = $start.plusDays(1))
        #end
      #elseif ($unit == 'w')
        ## If $amount &gt; 0 then the range starts at 12:00:00 AM on the first day of the week that started $amount weeks
        ## before the current week, and continues up to 11:59 PM on the last day of the week before the current week. So
        ## the current week is not included for $amount &gt; 0. We handle $amount == 0 (This week) differently.
        #set ($start = $now.minusWeeks($amount).withDayOfWeek(1).withTimeAtStartOfDay())
        ## We add at least 1 week in order to handle the case when $amount == 0 (this week).
        #set ($end = $start.plusWeeks($mathtool.max($amount, 1)))
      #elseif ($unit == 'm')
        ## If $amount &gt; 0 then the range starts at 12:00:00 AM on the first day of the month that started $amount months
        ## before the current month and continues up to 11:59 PM on the last day of the month before the current month.
        ## So the current month is not included for $amount &gt; 0. We handle $amount == 0 (This month) differently.
        #set ($start = $now.minusMonths($amount).withDayOfMonth(1).withTimeAtStartOfDay())
        ## We add at least 1 month in order to handle the case when $amount == 0 (this month).
        #set ($end = $start.plusMonths($mathtool.max($amount, 1)))
      #elseif ($unit == 'y')
        ## If $amount &gt; 0 then the range starts at 12:00:00 AM on January 1st, $amount years ago. The range ends on
        ## December 31 of the year before the current year. So the current year is not included for $amount &gt; 0. We
        ## handle $amount == 0 (This year) differently.
        #set ($start = $now.minusYears($amount).withDayOfYear(1).withTimeAtStartOfDay())
        ## We add at least 1 year in order to handle the case when $amount == 0 (this year).
        #set ($end = $start.plusYears($mathtool.max($amount, 1)))
      #end
      #set ($where = "$where and $entry.value &gt;= :${entry.key}Start and $entry.value &lt; :${entry.key}End")
      #set ($discard = $parameters.put("${entry.key}Start", $datetool.toDate($start.millis)))
      #set ($discard = $parameters.put("${entry.key}End", $datetool.toDate($end.millis)))
    #end
  #end
#end

#macro (getFilesStatement $from $where $parameters $return)
  #set ($from = ", BaseObject as fileObj#if (""$!from"" != ''), $!from#end")
  #set ($joinFiles = "fileObj.className = 'FileManagerCode.FileClass' and fileObj.name = doc.fullName")
  #set ($where = "$joinFiles#if (""$!where"" != '') and $!where#end")
  #set ($joinAttachments = false)
  #set ($storedColumns = {
    'name': 'attach.filename',
    'size': 'attach.longSize',
    'creationDate': 'doc.creationDate',
    'date': 'doc.date',
    'creator': 'doc.creator',
    'author': 'doc.author'
  })
  #foreach ($entry in $storedColumns.entrySet())
    #set ($filterValue = $request.getParameter(".$entry.key"))
    #if ("$!filterValue" != '')
      #set ($joinAttachments = $joinAttachments || $entry.value.startsWith('attach.'))
      #if ($entry.key == 'name')
        #set ($where = "$where and lower($entry.value) like :$entry.key")
        #set ($discard = $parameters.put($entry.key, "%$filterValue.toLowerCase()%"))
      #elseif ($entry.key == 'author' || $entry.key == 'creator')
        #set ($userReference = $services.model.resolveDocument($filterValue))
        #if ($filterValue == $services.model.serialize($userReference, 'compact', $userReference))
          ## Only the user alias is specified. Do partial matching.
          #set ($where = "$where and lower($entry.value) like :$entry.key")
          #set ($discard = $parameters.put($entry.key, "%$filterValue.toLowerCase()%"))
        #else
          ## The user reference is specified. Match the exact reference.
          #set ($where = "$where and $entry.value = :$entry.key")
          #set ($discard = $parameters.put($entry.key, $filterValue))
        #end
      #elseif ($entry.key == 'date' || $entry.key == 'creationDate')
        #filterByDate()
      #end
    #end
  #end
  #set ($orderBy = '')
  #set ($sort = $storedColumns.get($request.sort))
  #if ($sort)
    #set ($joinAttachments = $joinAttachments || $sort.startsWith('attach.'))
    #set ($order = $request.order)
    #if ($order != 'desc')
      #set ($order = '')
    #end
    #set ($orderBy = "order by $sort $order")
  #end
  #if ($joinAttachments)
    ## We need to join with the Attachments table.
    #set ($from = "$from, XWikiAttachment attach")
    #set ($where = "$!where and attach.docId = doc.id")
  #end
  #if ("$!where" != '')
    #set ($where = "where $stringtool.removeStart($where.trim(), 'and ')")
  #end
  #set ($return = $NULL)
  #setVariable("$return" "$from $!where $orderBy")
#end

#macro (getChildFiles $parentDoc $return)
  #set ($parameters = {'space': $parentDoc.space, 'tag': $parentDoc.documentReference.name})
  #set ($fromTags = 'BaseObject as tagObj, DBStringListProperty as tagsProp')
  #set ($joinTags = "tagObj.className = 'XWiki.TagClass' and tagObj.name = doc.fullName and tagObj.id = tagsProp.id.id and tagsProp.id.name = 'tags'")
  #getFilesStatement($fromTags "doc.space = :space and $joinTags and :tag in elements(tagsProp.list)"
    $parameters $statement)
  #getFiles($statement $parameters $_return)
  #set ($return = $NULL)
  #setVariable("$return" $_return)
#end

#macro (checkIfHasOrphanFiles $return)
  ## A file can have multiple parent folders, which are declared using tags, and one of these parent folders, usually
  ## the first, is set as wiki page parent so that a tree widget can still display the hierarchy nicely.
  #getFilesStatement('' "doc.space = :space and $hasNoParent" $NULL $statement)
  #set ($query = $services.query.hql($statement))
  #set ($query = $query.bindValue('space', $doc.space).bindValue('parent', $doc.fullName))
  #set ($results = $query.setLimit(1).execute())
  #set ($return = $NULL)
  #setVariable("$return" $results.size().equals(1))
#end

#macro (getSimilarFiles $return)
  #set ($parentDoc = $xwiki.getDocument($services.model.createDocumentReference('', ['FileManager'], $request.parent)))
  #set ($parameters = {'space': $parentDoc.space, 'tag': $parentDoc.documentReference.name, 'fileName': $request.getParameter('.name')})
  #set ($fromTags = 'BaseObject as tagObj, DBStringListProperty as tagsProp')
  #set ($joinTags = "tagObj.className = 'XWiki.TagClass' and tagObj.name = doc.fullName and tagObj.id = tagsProp.id.id and tagsProp.id.name = 'tags'")
  #getFilesStatement($fromTags "doc.space = :space and $joinTags and :tag in elements(tagsProp.list) and lower(:fileName) like lower(attach.filename)"
    $parameters $statement)
  #getFiles($statement $parameters $_return)
  #setVariable("$return" $_return)
#end

#macro (getFiles $statement $parameters $return)
  #set ($query = $services.query.hql($statement))
  #foreach ($entry in $parameters.entrySet())
    #set ($discard = $query.bindValue($entry.key, $entry.value))
  #end
  #set ($fileCount = $query.count())
  #set ($files = [])
  #set ($offset = $numbertool.toNumber($request.offset).intValue())
  #if ($offset)
    #set ($discard = $query.setOffset($offset))
  #end
  #set ($limit = $numbertool.toNumber($request.limit).intValue())
  #if ($limit)
    #set ($discard = $query.setLimit($limit))
  #end
  #foreach ($fileId in $query.execute())
    #set ($fileDoc = $xwiki.getDocument($fileId))
    #if ($fileDoc)
      #getFile($fileDoc $file)
      #set ($discard = $files.add($file))
    #else
      ## The current user doesn't have the right to view this file.
      #set ($discard = $files.add({}))
    #end
  #end
  #set ($return = $NULL)
  #setVariable("$return" {
    'totalCount': $fileCount,
    'offset': $offset,
    'limit': $limit,
    'list': $files
  })
#end

#macro (getFile $fileDoc $return)
  #getFilePaths($fileDoc $paths)
  #set ($attachments = $fileDoc.attachmentList)
  #if ($attachments.size() &gt; 0)
    #set ($attach = $attachments.get(0))
  #else
    ## Fail safe.
    #set ($attach = {
      'filename': $fileDoc.plainTitle,
      'longSize': 0
    })
  #end
  #set ($canDeleteFileDoc = $fileDoc.hasAccessLevel('delete'))
  #set ($return = $NULL)
  #setVariable("$return" {
    'id': $fileDoc.documentReference.name,
    'name': $attach.filename,
    'creationDate': $fileDoc.creationDate,
    'date': $fileDoc.date,
    'creator': $fileDoc.creator,
    'author': $fileDoc.author,
    'size': $attach.longSize,
    'mediaType': $attach.mimeType,
    'version': $fileDoc.version,
    'description': $fileDoc.display('description'),
    'paths': $paths,
    'canRename': $canDeleteFileDoc,
    'canDelete': $canDeleteFileDoc,
    'canMove': $canDeleteFileDoc,
    'canCopy': $hasCreatePage,
    'canCreate': $hasCreatePage
  })
#end

#macro (getFilePaths $fileDoc $return)
  #set ($tags = $fileDoc.getObject('XWiki.TagClass').getProperty('tags').value)
  #set ($_paths = [])
  #if ($tags &amp;&amp; $tags.size() &gt; 0)
    #set ($docNameInTags = 'doc.name in (:tags)')
    #set ($isFolderOrDrive = "doc.fullName = obj.name and obj.className in ('FileManagerCode.FolderClass', 'FileManagerCode.DriveClass')")
    #set ($statement = ", BaseObject obj where doc.space = :docSpace and $isFolderOrDrive and $docNameInTags")
    #foreach ($parentId in $services.query.hql($statement).bindValue('docSpace', $fileDoc.space).bindValue('tags', $tags).execute())
      #set ($parentReference = $services.model.resolveDocument($parentId, 'explicit', $fileDoc.documentReference))
      #set ($parentDoc = $xwiki.getDocument($parentReference))
      #set ($path = [])
      #getPath($parentDoc $path)
      #if (!$path.isEmpty())
        #set ($discard = $_paths.add($path))
      #end
    #end
  #end
  #set ($return = $NULL)
  #setVariable("$return" $_paths)
#end

#macro (getPath $nodeDoc $path)
  ## Prevent cycles. Also make sure the given document is either a folder or a drive.
  #set ($isFolder = $nodeDoc.getObject('FileManagerCode.FolderClass'))
  #set ($isDrive = $nodeDoc.getObject('FileManagerCode.DriveClass'))
  #if ($nodeDoc &amp;&amp; !$nodeDoc.isNew() &amp;&amp; !$path.contains($nodeDoc.documentReference.name) &amp;&amp; ($isFolder || $isDrive))
    #set ($discard = $path.add($nodeDoc.documentReference.name))
    #if ($isFolder &amp;&amp; "$!nodeDoc.parent" != '')
      #set ($parentReference = $services.model.resolveDocument($nodeDoc.parent, 'explicit', $nodeDoc.documentReference))
      ## The parent must be on the same drive (space).
      #if ($nodeDoc.documentReference.parent.equals($parentReference.parent))
        #getPath($xwiki.getDocument($parentReference) $path)
      #end
    #end
  #end
#end

#macro (createFile)
  #set ($fileName = $xwiki.fileupload.getFileName('filepath'))
  #if ("$!fileName" != '')
    #if ($request.uploadAction == 'newFile')
      #set ($fileReference = $services.drive.getUniqueReference($fileName))
    #else
      ## For the replace action use the file specified by the user, whose name is different than the name from the form.
      #set ($fileName = $request.replacedFileName)
      #set ($fileReference = $services.model.createDocumentReference('', ['FileManager'], $request.replacedFileId))
    #end
    #set ($fileDoc = $xwiki.getDocument($fileReference))
    #if ($fileDoc &amp;&amp; $fileDoc.hasAccessLevel('edit'))
      #if ($request.uploadAction == 'newFile')
        ## Set the parent folder.
        #set ($discard = $fileDoc.setParent($doc.fullName))
        #set ($discard = $fileDoc.newObject('XWiki.TagClass').set('tags', [$doc.documentReference.name]))
        ## Add the file object.
        #set ($discard = $fileDoc.newObject('FileManagerCode.FileClass').set('description', "$!request.description"))
      #end
      ## Add the attachment.
      ## Find the attachment among the fields of this form-submission.
      #set ($fileUploadFiles = $xwiki.fileupload.getFileItems())
      #set ($inputStream = "")
      #foreach ($fileItem in $fileUploadFiles)
        #if ('filepath' == $fileItem.getFieldName())
          #set ($inputStream = $fileItem.getInputStream())
        #end
      #end
      #set ($discard = $fileDoc.addAttachment($fileName, $inputStream))
      #set ($discard = $fileDoc.save('File created'))
      #if ($request.legacyBrowser == 'true')
        ## See https://github.com/danialfarid/ng-file-upload/issues/163 (IE9 Post just hangs in there, does not return
        ## anything) Because of the Flash limitation/bug there need to be a response body coming back from the server in
        ## order for the success and error callbacks to work properly.
        #getFile($fileDoc $data)
        #set ($discard = $response.setContentType('text/html'))
        $!jsontool.serialize({
          'status': 200,
          'statusText': 'OK',
          'response': $data
        })
      #else
        #set ($discard = $response.sendRedirect($fileDoc.getURL('get', 'outputSyntax=plain')))
      #end
    #else
      ## Forbidden
      #set ($discard = $response.sendError(403, 'You are not allowed to perform this action.'))
    #end
  #else
    ## Bad Request
    $response.sendError(400, "The 'filepath' request parameter is missing. Either you didn't submit any file or the size of the submitted file exceeds the configured maximum upload size.")
  #end
#end

#macro (getDriveReference $return)
  #set ($statement = 'from doc.object(FileManagerCode.DriveClass) as drive where doc.space = :space')
  #set ($drives = $services.query.xwql($statement).bindValue('space', $doc.space).setLimit(1).execute())
  #if ($drives &amp;&amp; !$drives.isEmpty())
    #set ($driveReference = $services.model.resolveDocument($drives.get(0), 'explicit', $doc.documentReference))
  #else
    ## Fall-back on the space home page.
    #set ($driveReference = $services.model.createDocumentReference('WebHome',
      $doc.documentReference.lastSpaceReference))
  #end
  #set ($return = $NULL)
  #setVariable("$return" $driveReference)
#end

#macro (handleJobStartFailure $jobId)
  #if ($jobId)
    #getDriveReference($driveReference)
    #set ($discard = $response.sendRedirect($xwiki.getURL($driveReference, 'get', $escapetool.url({
      'outputSyntax': 'plain',
      'data': 'jobStatus',
      'id': $jobId
    }))))
  #else
    $response.sendError(500, $services.drive.lastError.message);
  #end
#end

#macro (getActiveJobs $return)
  #set ($activeJobs = [])
  #foreach ($jobId in $services.drive.activeJobs)
    #getJobStatus($jobId $jobStatus)
    #set ($discard = $activeJobs.add($jobStatus))
  #end
  #set ($return = $NULL)
  #setVariable("$return" $activeJobs)
#end

#macro (getJobStatus $jobId $return)
  #set ($jobStatus = $services.drive.getJobStatus($jobId))
  #if ($jobStatus)
    #set ($pathsAsJSON = [])
    #foreach ($path in $jobStatus.request.paths)
      #set ($discard = $pathsAsJSON.add({
        'parent': $path.folderReference.name,
        'child': $path.fileReference.name
      }))
    #end
    #set ($jobStatusAsJSON = {
      'id': $jobId,
      'state': $jobStatus.state,
      'request': {
        'type': $jobStatus.request.getProperty('job.type'),
        'user': "$!jobStatus.request.getProperty('user.reference')",
        'paths': $pathsAsJSON
      },
      'error': $jobStatus.error,
      'log': {},
      'progress': {
        'offset': $jobStatus.progress.offset,
        'currentLevelOffset': $jobStatus.progress.currentLevelOffset
      },
      'startDate': $jobStatus.startDate,
      'endDate': $jobStatus.endDate
    })
    #if ($jobStatus.question)
      #set ($jobStatusAsJSON.question = {
        'source': $jobStatus.question.source.name,
        'destination': $jobStatus.question.destination.name
      })
    #end
    #if ($jobStatus.request.destination)
      #set ($jobStatusAsJSON.request.destination = {
        'parent': $jobStatus.request.destination.folderReference.name,
        'child': $jobStatus.request.destination.fileReference.name
      })
    #end
    #if ($jobStatus.request.outputFileReference)
      #set ($jobStatusAsJSON.bytesWritten = $jobStatus.bytesWritten)
      #set ($jobStatusAsJSON.outputFileSize = $jobStatus.outputFileSize)
      #set ($jobStatusAsJSON.request.outputFile = {
        'id': $jobStatus.request.outputFileReference.parent.name,
        'name': $jobStatus.request.outputFileReference.name,
        'url': $xwiki.getURL($jobStatus.request.outputFileReference.parent, 'get')
      })
    #end
    #set ($return = $NULL)
    #setVariable("$return" $jobStatusAsJSON)
  #end
#end

#macro (similarFileWarning)
  &lt;div class="modal fade" id="similarFileModal" tabindex="-1" role="dialog"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal"
            aria-label="$escapetool.xml($services.localization.render('fileManager.similarFileModal.close'))"&gt;
            &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
          &lt;/button&gt;
          &lt;h4 class="modal-title"&gt;
            $escapetool.xml($services.localization.render('fileManager.similarFileModal.title'))
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;form&gt;
            &lt;p&gt;
              &lt;b class="fileName"&gt;&lt;/b&gt;
              $escapetool.xml($services.localization.render('fileManager.similarFileModal.fileExists'))
            &lt;/p&gt;
            &lt;div class="form-group radioList"&gt;
              &lt;div class="form-row"&gt;
                &lt;div class="form-check"&gt;
                  &lt;input type="radio" id="newFile" name="uploadAction" value="newFile" checked&gt;
                  &lt;label for="newFile"&gt;
                    $escapetool.xml($services.localization.render('fileManager.similarFileModal.newFile'))
                  &lt;/label&gt;
                &lt;/div&gt;
                &lt;div class="form-check"&gt;
                  &lt;input type="radio" id="replace" name="uploadAction" value="replace"&gt;
                  &lt;label for="replace"&gt;
                    $escapetool.xml($services.localization.render('fileManager.similarFileModal.replace'))
                  &lt;/label&gt;
                  &lt;select class="form-control" name="replacedFile" id="replacedFile"&gt;&lt;/select&gt;
                &lt;/div&gt;
                &lt;div class="form-check"&gt;
                  &lt;input type="radio" id="abort" name="uploadAction" value="abort"&gt;
                  &lt;label for="abort"&gt;
                    $escapetool.xml($services.localization.render('fileManager.similarFileModal.abort'))
                  &lt;/label&gt;
                &lt;/div&gt;
              &lt;/div&gt;##form-row
            &lt;/div&gt;##form-group
            &lt;div class="form-group"&gt;
              &lt;div class="form-row"&gt;
                &lt;div class="form-check"&gt;
                  &lt;input type="checkbox" id="repeat" name="repeatAction" value="doRepeat"&gt;
                  &lt;small&gt;&lt;label for="repeat"&gt;
                    $escapetool.xml($services.localization.render('fileManager.similarFileModal.repeat'))
                  &lt;/label&gt;&lt;/small&gt;
                &lt;/div&gt;
              &lt;/div&gt;##form-row
            &lt;/div&gt;###form-group
          &lt;/form&gt;
        &lt;/div&gt;
        &lt;div class="modal-footer"&gt;
          &lt;input type="button" class="btn btn-primary"  data-dismiss="modal"
            value="$escapetool.xml($services.localization.render('fileManager.similarFileModal.submit'))"&gt;
          &lt;input type="button" class="btn btn-default" data-dismiss="modal"
            value="$escapetool.xml($services.localization.render('cancel'))"&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
#end
{{/velocity}}</content>
</xwikidoc>
