<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.5" reference="FileManagerCode.Migrator" locale="">
  <web>FileManagerCode</web>
  <name>Migrator</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>FileManagerCode.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set ($oldFilesQuery = "from doc.object(FileManager.FileManagerClass) as file where doc.space = :space and doc.fullName &lt;&gt; 'FileManager.FileManagerTemplate'")

#macro (checkIfMigrationIsNeeded $return)
  #set ($hasOldFiles = $request.migrate == 'true')
  #if (!$hasOldFiles)
    #set ($hasOldFiles = $services.query.xwql($oldFilesQuery).bindValue('space', $doc.space).count() &gt; 0)
  #end
  #set ($return = $NULL)
  #setVariable("$return" $hasOldFiles)
#end

#macro (handleMigration)
  #if ($request.migrate == 'true')
    #if ($services.csrf.isTokenValid($request.form_token))
      #migrate
    #elseif ($isAjaxRequest)
      $response.sendError(403, 'The CSRF token is missing.')
    #else
      $response.sendRedirect($services.csrf.getResubmissionURL())
    #end
  #else
    #displayMigrator##
  #end
#end

#macro (displayMigrator)
  {{warning}}
  The way the File Manager organizes its files and folders has changed in this version. You need to migrate your files to the new application structure in order to take advantage of the new user interface.

  (% class="buttons" %)
  (% class="buttonwrapper" %)[[Migrate&gt;&gt;||queryString="migrate=true&amp;form_token=$!services.csrf.token"]]
  {{/warning}}

  ## Escape {{ in the rendered content to be sure that the HTML macro is not closed unintentionally.
  {{html}}$doc.getRenderedContent($doc.content, $doc.syntax.toIdString()).replace('{{', '&amp;#123;&amp;#123;'){{/html}}
#end

#macro (migrate)
  #set ($query = $services.query.xwql($oldFilesQuery).bindValue('space', $doc.space))
  #set ($folderCache = {})
  #foreach ($fileDocName in $query.execute())
    #set ($fileDoc = $xwiki.getDocument($fileDocName))
    #if ($fileDoc &amp;&amp; $fileDoc.hasAccessLevel('edit'))
      #set ($oldFileObj = $fileDoc.getObject('FileManager.FileManagerClass'))
      ## Remove the old file object.
      #set ($discard = $fileDoc.removeObject($oldFileObj))
      ## Add the new file object if it doesn't exist already.
      #set ($discard = $fileDoc.getObject('FileManagerCode.FileClass', true))
      ## The file description is now stored in the file document's content.
      #set ($discard = $fileDoc.setContent($oldFileObj.getProperty('description').value))
      ## Transform the file tags into parent folders.
      #createParentFolders($fileDoc $folderCache)
      ## Finally, save the changes to the file document.
      #set ($discard = $fileDoc.save("Migrate file to the new File Manager Application's structure"))
    #end
  #end
  ## Redirect to drive view.
  #set ($discard = $response.sendRedirect($doc.getURL()))
#end

#macro (createParentFolders $fileDoc $folderCache)
  ## Transform the file tags into parent folders.
  #set ($oldTags = $fileDoc.getObject('XWiki.TagClass').getProperty('tags').value)
  #set ($newTags = [])
  #foreach ($tag in $oldTags)
    #set ($canonicalTag = $tag.toLowerCase())
    ## Check if a folder with the same id doesn't exist already.
    #set ($folderDoc = $folderCache.get($canonicalTag))
    #if (!$folderDoc)
      ## Check if a folder with the same name but with a different case exists (e.g. bAr vs. Bar).
      #set ($statement = 'from doc.object(FileManagerCode.FolderClass) as folder where doc.space = :space and lower(doc.name) = :name')
      #set ($query = $services.query.xwql($statement).bindValue('space', $doc.space).bindValue('name', $canonicalTag))
      #set ($results = $query.setLimit(1).execute())
      #if ($results.size() &gt; 0)
        #set ($folderDoc = $xwiki.getDocument($results.get(0)))
      #else
        #createFolderDoc($tag $folderDoc)
      #end
      #set ($discard = $folderCache.put($canonicalTag, $folderDoc))
    #end
    #if ($folderDoc)
      #set ($discard = $newTags.add($folderDoc.name))
    #else
      ## We don't have access to the folder document. Preserve the old tag.
      #set ($discard = $newTags.add($tag))
    #end
  #end
  #if ($newTags.size() &gt; 0)
    #set ($parentReference = $services.model.createDocumentReference($doc.wiki, $doc.space, $newTags.get(0)))
    #set ($parentFullName = $services.model.serialize($parentReference, 'compactwiki'))
    #set ($discard = $fileDoc.setParent($parentFullName))
    ## Update the tags.
    #set ($discard = $fileDoc.getObject('XWiki.TagClass').set('tags', $newTags))
  #end
#end

#macro (createFolderDoc $name $return)
  #set ($folderDocRef = $services.model.createDocumentReference($doc.wiki, $doc.space, $name))
  #set ($folderDoc = $xwiki.getDocument($folderDocRef))
  #if ($folderDoc &amp;&amp; $folderDoc.hasAccessLevel('edit'))
    #set ($discard = $folderDoc.setParent($doc.fullName))
    #set ($discard = $folderDoc.createNewObject('FileManagerCode.FolderClass'))
    #set ($discard = $folderDoc.save('Folder created from file tag during migration'))
  #end
  #set ($return = $NULL)
  #setVariable("$return" $folderDoc)
#end
{{/velocity}}</content>
</xwikidoc>
